generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

enum FivFelvStatus {
  POSITIVO
  NEGATIVO
  NAO_TESTADO
}

model Animal {
  id              Int               @id @default(autoincrement())
  slug            String            @unique
  nome            String
  especie         String
  sexo            String
  porte           String
  idadeMeses      Int
  vacinado        Boolean           @default(false)
  castrado        Boolean           @default(false)
  raca            String?
  temperamento    String?
  descricao       String
  historiaResgate String?
  convivencia     String?
  saudeDetalhes   String?
  dataResgate     DateTime?
  criadoEm        DateTime          @default(now())
  atualizadoEm    DateTime          @updatedAt
  adotado         Boolean           @default(false)
  adotadoEm       DateTime?
  fivFelvStatus    FivFelvStatus?
  oculto          Boolean           @default(false)
  requests        AdoptionRequest[]
  photos          Photo[]

  @@index([adotado, adotadoEm])
}

model Photo {
  id        Int      @id @default(autoincrement())
  animalId  Int
  url       String
  alt       String
  isCover   Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  animal    Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([animalId, sortOrder])
}

model AdoptionRequest {
  id       Int      @id @default(autoincrement())
  animalId Int
  nome     String
  email    String
  telefone String
  cidade   String
  uf       String
  mensagem String
  status   String   @default("NOVO")
  criadoEm DateTime @default(now())
  perfil   Json?
  bairro   String?
  cep      String?
  endereco String?
  numero   String?
  animal   Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([status, criadoEm])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partner {
  id        String   @id @default(cuid())
  name      String
  url       String?
  logoUrl   String
  active    Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([active, order])
}

model Event {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  startsAt  DateTime
  endsAt    DateTime?
  location  String?
  city      String?
  coverUrl  String?
  excerpt   String?
  content   String?
  published Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([published, startsAt])
}

model DonationSettings {
  id               String            @id @default("singleton")
  pixKey           String?
  pixKeyType       PixKeyType?
  bankName         String?
  bankAgency       String?
  bankAccount      String?
  bankHolder       String?
  recurringLink    String?
  itemsWanted      String?
  updatedAt        DateTime          @updatedAt
  collectionPoints CollectionPoint[]
}

model CollectionPoint {
  id         String           @id @default(cuid())
  settingsId String
  name       String
  address    String
  hours      String?
  phone      String?
  active     Boolean          @default(true)
  order      Int              @default(0)
  settings   DonationSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@index([settingsId, active, order])
}

enum Role {
  ADMIN
  EDITOR
}

enum PixKeyType {
  CPF
  CNPJ
  EMAIL
  TELEFONE
  ALEATORIA
}
